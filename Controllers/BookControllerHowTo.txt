Figure 4-11 presents the code for the Book controller of the Book Listapp. This controller starts by defining a private BookContext property named context. Then, it uses its constructor to set that property. This works the same as it does for the Home controller described in the previous figure. The Book controller has three action methods: Add(), Edit(), and Delete(). In addition, the Edit() and Delete() actions have overloads that handle both GET and POST requests. The Add() action, by contrast, only handles GET requests. That’s because the Add() and Edit() actions both use the Book/Edit view. For a GET request, both the Add() and Edit() actions set a ViewBag property named Action and pass a Book object to the view. However, the Add() action passes an empty Book object, and the Edit() action passes a Book object with data for an existing book. To do that, the Edit() action passes its id parameter to the Find() method to retrieve a book from the database. This is possible because the Edit link in the Home/Index view uses the asp-route-id tag helper to specify a value for the id argument. To be able to use the same view as the Edit() action, the Add() action passes “Edit” as the first argument to the View() method. As a result, the Add() action displays the same view as the Edit() action. Because the Edit() and Add() actions both use the Book/Edit view, the Edit() action method for a POST request must be able to add new books and update existing ones. To do that, it starts by checking whether the user entered valid data for the model. If the user entered valid data, the code checks the value of the BookId property of the Book object it receives from the view. If the value is zero, it’s a new book. In that case, the code passes it to the Add() action of the Books property. Otherwise, it’s an existing book. In that case, the code passes it to the Update() action of the Books property. After marking the Book object for insertion or update, the Edit() action calls the SaveChanges() method of the BookContext property. This causes the book data to be inserted or updated in the database. Then, the code redirects the user back to the Index() action of the Home controller, which displays the Home/ Index view. However, if the user didn’t enter valid data for the model, the code resets the Action property of the ViewBag to “Add” or “Edit”. Then, it sends the data the user entered back to the view to be redisplayed.The Delete() action for a GET request uses its id parameter to retrieve a Book object for the specified book from the database. Then, it passes that Book object to the view. Again, this is possible because the Delete link in the Home/Index view specifies a value for the id argument. The Delete() action for a POST request passes the Book object it receives from the view to the Remove() method of the Books property. After that, it calls the SaveChanges() method of the BookContext property to delete the book from the database. Finally, it redirects the user back to the Index action of the Home controller.